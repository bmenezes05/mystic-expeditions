@page "/character-creation"
@using MysticExpeditions.Server.Models
@using MysticExpeditions.Server.Services
@inject NavigationManager NavigationManager
@inject GameStateService GameStateService

<h3>Criação de Personagem</h3>

<EditForm Model="characterModel" OnValidSubmit="CreateCharacter">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="name">Nome do Personagem:</label>
        <InputText id="name" @bind-Value="characterModel.Name" />
    </div>

    <div>
        <label for="gender">Sexo:</label>
        <InputSelect id="gender" @bind-Value="characterModel.Gender">
            <option value="Male">Masculino</option>
            <option value="Female">Feminino</option>
        </InputSelect>
    </div>

    <div>
        <label for="race">Raça:</label>
        <InputSelect id="race" @bind-Value="characterModel.RaceId">
            @foreach (var race in Races)
            {
                <option value="@race.Id">@race.Name</option>
            }
        </InputSelect>
    </div>

    <div>
        <label for="class">Classe:</label>
        <InputSelect id="class" @bind-Value="characterModel.ClassId">
            @foreach (var characterClass in Classes)
            {
                <option value="@characterClass.ClassId">@characterClass.Name</option>
            }
        </InputSelect>
    </div>

    <div>
        <label for="subclass">Subclasse:</label>
        <InputSelect id="subclass" @bind-Value="characterModel.SubClassId">
            @foreach (var subclass in Subclasses)
            {
                <option value="@subclass.ClassId">@subclass.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit">Criar Personagem</button>
</EditForm>

@code {
    private Character characterModel = new Character();
    private List<Race> Races = new List<Race>();
    private List<Class> Classes = new List<Class>();
    private List<Class> Subclasses = new List<Class>();

    protected override async Task OnInitializedAsync()
    {
        Races = await GameStateService.GetRacesAsync();
        Classes = await GameStateService.GetClassesAsync();
        Subclasses = await GameStateService.GetSubclassesAsync();
    }

    private async Task CreateCharacter()
    {
        await GameStateService.CreateCharacterAsync(characterModel);
        NavigationManager.NavigateTo("/game");
    }
}

<style>
    .new-game-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #ECEFF4;
        color: #1B263B;
        border-radius: 10px;
    }

        .new-game-container h1 {
            text-align: center;
            font-family: 'Cinzel', serif;
            color: #F5C518;
        }

        .new-game-container label {
            display: block;
            margin-bottom: 10px;
            font-family: 'Roboto', sans-serif;
            color: #333333;
        }

        .new-game-container input, .new-game-container select {
            width: 100%;
            padding: 8px;
            font-size: 16px;
            margin-bottom: 10px;
            border: 1px solid #CCC;
            border-radius: 5px;
        }

        .new-game-container button {
            padding: 10px 20px;
            font-size: 18px;
            font-family: 'Cinzel', serif;
            background-color: #4CAF50;
            color: #FFFFFF;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .new-game-container button:hover {
                background-color: #45A049;
            }
</style>